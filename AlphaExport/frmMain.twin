[ Description ("tbDevMan Main Form") ]
[ FormDesignerId ("9D5C3949-7539-4FCC-9D96-136E21889D63") ]
[ PredeclaredId ]
Class Form1

Private Const cxyIcon As Long = 20

Private himlMain As LongPtr
Private tDevIml As SP_CLASSIMAGELIST_DATA

Private Type DMItem
	bDevice As Boolean
    bDisable As Boolean
    AsscGUID As UUID
    DispName As String
    Desc As String
    InstId As String
    hItem As LongPtr
    hItemPar As LongPtr
    nIcon As Long
    dvi As Long
    DevCap As SetupDevCap
End Type
Private DMSet() As DMItem
Private nItems As Long

Private arClasses() As UUID


Private Sub OnLoad() Handles Form.Load
    himlMain = ImageList_Create(cxyIcon, cxyIcon, ILC_COLOR32 Or ILC_HIGHQUALITYSCALE, 1, 1)
    SendMessage TreeView1.hWnd, TVM_SETIMAGELIST, 0, ByVal himlMain
End Sub

Private Sub OnUnload(Cancel As Integer) Handles Form.Unload
    ImageList_Destroy himlMain
    If tDevIml.ImageList Then SetupDiDestroyClassImageList tDevIml
End Sub

[ Description ("Enumerates all hardware classes and adds them to the DMSet array and as root nodes in the TreeView.") ]
Private Sub pvEnumClasses()
    On Error GoTo e0
    Dim ret As BOOL
    Dim cbReq As Long
    Dim i As Long
    Dim sBufN As String, sBufD As String
    Dim cchReq As Long
    Dim hIcon As LongPtr
    
    ret = SetupDiBuildClassInfoList(0, vbNullPtr, 0, cbReq)
    
    If cbReq > 0 Then
        ReDim arClasses(cbReq - 1)

        ret = SetupDiBuildClassInfoList(0, arClasses(0), UBound(arClasses) + 1, cbReq)
        If ret Then
           For i = 0 To UBound(arClasses) - 1
           	    sBufN = String$(MAX_CLASS_NAME_LEN, 0)
                ret = SetupDiClassNameFromGuid(arClasses(i), sBufN, Len(sBufN), cchReq)
                If cchReq Then sBufN = Left$(sBufN, cchReq - 1)
                cchReq = 0
                ret = SetupDiGetClassDescription(arClasses(i), vbNullString, 0, cchReq)
                If cchReq > 0 Then
                    sBufD = String$(cchReq, 0)
                    ret = SetupDiGetClassDescription(arClasses(i), sBufD, Len(sBufD), cchReq)
                End If
                
                ret = SetupDiLoadClassIcon(arClasses(i), hIcon)
                
                ReDim Preserve DMSet(nItems)
                DMSet(i).DispName = sBufN
                DMSet(i).Desc = sBufD
                DMSet(i).AsscGUID = arClasses(i)
                If hIcon Then
                    DMSet(i).nIcon = ImageList_AddIcon(himlMain, hIcon)
                    DMSet(i).nIcon += 1
                    DestroyIcon hIcon
                End If
                nItems += 1
                Debug.Print "Added class " & dbg_GUIDToString(arClasses(i)) & ": Name=" & sBufN & ", Description=" & sBufD
           Next
        End If
    
    End If
    
    If nItems Then
        Dim oNode As Node
        For i = 0 To UBound(DMSet)
        	Set oNode = TreeView1.Nodes.Add(, , , DMSet(i).Desc, DMSet(i).nIcon)
            DMSet(i).hItem = oNode.Handle
            oNode.Key = CVar(CStr(i))
        Next
    End If
        
    Exit Sub
e0:
Debug.Print CurrentComponentName & "." & CurrentProcedureName & "->Error: " & Err.Number & " (" & Err.Number & "); LastDllError=0x" & Hex$(Err.LastDllError)
            
End Sub

[ Description ("Goes through the class list from pvEnumClasses and adds all installed devices for each category.") ]
Private Sub pvPopulateDevices()
    On Error GoTo e0
    
	Dim hSet As LongPtr
    Dim i As Long, j As Long
    Dim hIcon As LongPtr
    Dim tDevInfo As SP_DEVINFO_DATA
    Dim sBufN As String
    Dim sBufID As String
    Dim cbReq As Long
    Dim cchReq As Long
    Dim ret As BOOL
    Dim regType As REGTYPES
    Dim dwCap As SetupDevCap
    
    For i = 0 To UBound(DMSet)
        If DMSet(i).bDevice Then Continue For
        
        'Is a class
        hSet = SetupDiGetClassDevs(DMSet(i).AsscGUID, vbNullString, Me.hWnd, DIGCF_PRESENT)
        'If hSet = INVALID_HANDLE_VALUE Then Continue For
        	
        tDevInfo.cbSize = LenB(tDevInfo)
        j = 0
        
        Do While SetupDiEnumDeviceInfo(hSet, j, tDevInfo)
            cchReq = 0: cbReq = 0
            sBufN = "": sBufID = ""
            dwCap = 0
            ret = SetupDiGetDeviceInstanceId(hSet, tDevInfo, vbNullString, 0, cchReq)
            If cchReq Then
                sBufID = String$(cchReq, 0)
                ret = SetupDiGetDeviceInstanceId(hSet, tDevInfo, sBufID, Len(sBufID), cchReq)
                If InStr(sBufID, Chr$(0)) > 1 Then
                    sBufID = Left$(sBufID, InStr(sBufID, Chr$(0)) - 1)
                End If
            End If
        	ret = SetupDiGetDeviceRegistryProperty(hSet, tDevInfo, SPDRP_CAPABILITIES, regType, dwCap, 4, cbReq)
            cbReq = 0
            sBufN = String$(80, 0)
            ret = SetupDiGetDeviceRegistryPropertyW(hSet, tDevInfo, SPDRP_FRIENDLYNAME, regType, ByVal StrPtr(sBufN), LenB(sBufN), cbReq)
            If Err.LastDllError = ERROR_INVALID_DATA Then 'No friendly name
                cbReq = 0
            	ret = SetupDiGetDeviceRegistryPropertyW(hSet, tDevInfo, SPDRP_DEVICEDESC, regType, ByVal 0, 0, cbReq)
                If cbReq Then
                    sBufN = String$(cbReq / 2, 0)
                    ret = SetupDiGetDeviceRegistryPropertyW(hSet, tDevInfo, SPDRP_DEVICEDESC, regType, ByVal StrPtr(sBufN), LenB(sBufN), cbReq)
                End If
                If Left$(sBufN, 1) = vbNullChar Then
                    sBufN = sBufID
                    Debug.Print "Name fallback; no FN, no DD " & sBufID
                End If
                ' If Right$(sBufN, 1) = vbNullChar Then
                '     sBufN = Left$(sBufN, Len(sBufN) = 1)
                ' End If
            Else
                If InStr(sBufN, Chr$(0)) > 1 Then
                    sBufN = Left$(sBufN, InStr(sBufN, Chr$(0)) - 1)
                Else
                    sBufN = sBufID
                End If
            End If

            ret = SetupDiLoadDeviceIcon(hSet, tDevInfo, cxyIcon, cxyIcon, 0, hIcon)
            
            Debug.Print "AddDevice " & sBufN & "=>" & sBufID
            ReDim Preserve DMSet(nItems)
            With DMSet(nItems)
                .AsscGUID = tDevInfo.ClassGuid
                .bDevice = True
                .dvi = tDevInfo.DevInst
                If sBufN = "" Then
                    .DispName =	.InstId
                Else
                    .DispName = sBufN
                End If
                .DevCap = dwCap
                .InstId = sBufID
                If hIcon Then
                    .nIcon = ImageList_AddIcon(himlMain, hIcon)
                    .nIcon += 1
                    DestroyIcon hIcon
                    hIcon = 0
                End If

                Dim oNodePar As Node
                Set oNodePar = pvNodeFromHandle(DMSet(i).hItem)
                Dim oNode As Node
                Set oNode = TreeView1.Nodes.Add(oNodePar, tvwChild, CVar(CStr(nItems)), DMSet(nItems).DispName, DMSet(nItems).nIcon)
                .hItem = oNode.Handle
                .hItemPar = oNodePar.Handle
                'End If
            End With
            nItems += 1
            j += 1
            tDevInfo.cbSize = LenB(tDevInfo)
        Loop
    Next
    
    SetupDiDestroyDeviceInfoList hSet
    Exit Sub
e0:
Debug.Print CurrentComponentName & "." & CurrentProcedureName & "->Error: " & Err.Number & " (" & Err.Number & "); LastDllError=0x" & Hex$(Err.LastDllError)
If hSet Then SetupDiDestroyDeviceInfoList hSet
End Sub

Private Sub pvShowPropPage(idx As Long)
Dim hSet As LongPtr
Dim i As Long, j As Long
Dim tDevInfo As SP_DEVINFO_DATA
Dim pPages As LongPtr
Dim tHeader As PROPSHEETHEADER_V2
Dim sBufN As String
Dim sBufID As String
Dim npReq As Long
Dim cchReq As Long
Dim ret As BOOL
Dim regType As REGTYPES
    
    hSet = SetupDiGetClassDevs(DMSet(idx).AsscGUID, vbNullString, Me.hWnd, DIGCF_ALLCLASSES)
    'If hSet = INVALID_HANDLE_VALUE Then Continue For
        
    tDevInfo.cbSize = LenB(tDevInfo)
    j = 0
    
    Do While SetupDiEnumDeviceInfo(hSet, j, tDevInfo)
        cchReq = 0
        sBufN = "": sBufID = ""
        ret = SetupDiGetDeviceInstanceId(hSet, tDevInfo, vbNullString, 0, cchReq)
        If cchReq Then
            sBufID = String$(cchReq, 0)
            ret = SetupDiGetDeviceInstanceId(hSet, tDevInfo, sBufID, Len(sBufID), cchReq)
            If InStr(sBufID, Chr$(0)) > 1 Then
                sBufID = Left$(sBufID, InStr(sBufID, Chr$(0)) - 1)
            End If
        End If
        If sBufID = DMSet(idx).InstId Then
        
            ret = SetupDiGetClassDevPropertySheetsW(hSet, tDevInfo, vbNullPtr, 0, npReq, DIGCDP_FLAG_ADVANCED)
            If npReq Then
                pPages = LocalAlloc(LPTR, LenB(Of PROPSHEETPAGE_V4) * npReq)
                tHeader.dwSize = LenB(Of PROPSHEETHEADER_V2)
                tHeader.nPages = npReq
                tHeader.ppsp = pPages
                ret = SetupDiGetClassDevPropertySheetsW(hSet, tDevInfo, tHeader, npReq, cchReq, DIGCDP_FLAG_ADVANCED)
                Call PropertySheetW(tHeader)
                LocalFree pPages
                SetupDiDestroyDeviceInfoList hSet
                Exit Sub
            End If
        End If
        j += 1
        tDevInfo.cbSize = LenB(tDevInfo)
    Loop
    
    Exit Sub
e0:
Debug.Print CurrentComponentName & "." & CurrentProcedureName & "->Error: " & Err.Number & " (" & Err.Number & "); LastDllError=0x" & Hex$(Err.LastDllError)
If hSet Then SetupDiDestroyDeviceInfoList hSet
If pPages Then LocalFree pPages
End Sub

Private Function pvEnableDevice(idx As Long, fEnable As Boolean) As Long
Dim hSet As LongPtr
Dim i As Long, j As Long
Dim tDevInfo As SP_DEVINFO_DATA
Dim pPages As LongPtr
Dim tParams As SP_PROPCHANGE_PARAMS
Dim sBufN As String
Dim sBufID As String
Dim npReq As Long
Dim cchReq As Long
Dim ret As BOOL
Dim regType As REGTYPES
    
    hSet = SetupDiGetClassDevs(DMSet(idx).AsscGUID, vbNullString, Me.hWnd, DIGCF_ALLCLASSES)
    If hSet = INVALID_HANDLE_VALUE Then Return Err.LastDllError
        
    tDevInfo.cbSize = LenB(tDevInfo)
    j = 0
    
    Do While SetupDiEnumDeviceInfo(hSet, j, tDevInfo)
        cchReq = 0
        sBufN = "": sBufID = ""
        ret = SetupDiGetDeviceInstanceId(hSet, tDevInfo, vbNullString, 0, cchReq)
        If cchReq Then
            sBufID = String$(cchReq, 0)
            ret = SetupDiGetDeviceInstanceId(hSet, tDevInfo, sBufID, Len(sBufID), cchReq)
            If InStr(sBufID, Chr$(0)) > 1 Then
                sBufID = Left$(sBufID, InStr(sBufID, Chr$(0)) - 1)
            End If
        End If
        If sBufID = DMSet(idx).InstId Then
            tParams.ClassInstallHeader.cbSize = LenB(Of SP_CLASSINSTALL_HEADER)
            tParams.ClassInstallHeader.InstallFunction = DIF_PROPERTYCHANGE
            If fEnable Then
                tParams.StateChange = DICS_ENABLE
            Else
                tParams.StateChange = DICS_DISABLE
            End If
            
            ret = SetupDiSetClassInstallParams(hSet, tDevInfo, tParams, LenB(Of SP_PROPCHANGE_PARAMS))
            If ret Then
                ret = SetupDiCallClassInstaller(DIF_PROPERTYCHANGE, hSet, tDevInfo)
                SetupDiDestroyDeviceInfoList hSet
                If ret Then
                    Return S_OK
                Else
                    Return Err.LastDllError
                End If
            Else
                SetupDiDestroyDeviceInfoList hSet
                Return Err.LastDllError
            End If
        End If
        
        j += 1
        tDevInfo.cbSize = LenB(tDevInfo)
    Loop

    Return S_FALSE
e0:
Debug.Print CurrentComponentName & "." & CurrentProcedureName & "->Error: " & Err.Number & " (" & Err.Number & "); LastDllError=0x" & Hex$(Err.LastDllError)
If hSet Then SetupDiDestroyDeviceInfoList hSet
End Function

' Private Function InsertDevByIdx(n As Long, out_hPar As LongPtr) As LongPtr
' 	Dim oParNode As Node
'     Set oParNode = FindDeviceParentNode(DMSet(n).AsscGUID)
'     If (oParNode IsNot Nothing) Then
'     	Dim oNode As Node
'         Set oNode = TreeView1.Nodes.Add(oParNode, tvwChild, n, DMSet(n).DispName, DMSet(n).nIcon)
'         If oNode IsNot Nothing Then
'             out_hPar = oParNode.Handle
'             Return oNode.Handle
'         End If
'     End If
' End Function

' Private Function FindDeviceParentNode(tGUID As UUID) As Node
' 	Dim i As Long
'     For i = 0 To UBound(DMSet)
'         If DMSet(i).bDevice = False Then
'             If IsEqualGUID(DMSet(i).AsscGUID, tGUID) Then
'                 Set FindDeviceParentNode = pvNodeFromHandle(DMSet(i).hItem)
'             End If
'         End If
'     Next
' End Function

[ Description ("Returns a Node object given an HTREEITEM handle.") ]
Private Function pvNodeFromHandle(hItem As LongPtr) As Node
	Dim oNode As Node
    For Each oNode In TreeView1.Nodes
        If oNode.Handle = hItem Then
            Set pvNodeFromHandle = oNode
        End If
	Next
End Function

[ Description ("Returns the DMSet items for the TreeView node represented by it's handle (HITEM)") ]
Private Function pvItemIndexFromHITEM(ByVal hItem As LongPtr) As Long
	Dim i As Long
    For i = 0 To UBound(DMSet)
    	If DMSet(i).hItem = hItem Then Return i
    Next
    Return -1
End Function

[ Description ("Prunes unused device categories from the tree.") ]
Private Function pvPruneUnused() As Boolean
	Dim pNode As Node
    For Each pNode In TreeView1.Nodes
        If DMSet(CLng(pNode.Key)).bDevice = False Then
            If pNode.Children = 0 Then
                TreeView1.Nodes.Remove pNode.Index
            End If
        End If
    Next
End Function



Private Sub EnumDevices() Handles cmdEnum.Click
    pvEnumClasses
    
    pvPopulateDevices
    
    If Check1.Value = vbUnchecked Then Call pvPruneUnused()
    
End Sub

Sub SetGroupState()
	
End Sub


Private Sub Command5_Click() Handles Command5.Click
    pvPruneUnused
End Sub



Private Sub TreeView1_DblClick() Handles TreeView1.DblClick
    Dim selIdx As Long = pvItemIndexFromHITEM(TreeView1.SelectedItem.Handle)
    pvShowPropPage selIdx
End Sub

Private Sub cmdEnable_Click() Handles cmdEnable.Click
    Dim selIdx As Long = pvItemIndexFromHITEM(TreeView1.SelectedItem.Handle)
    pvEnableDevice selIdx, False
End Sub

Private Sub cmdDisable_Click() Handles cmdDisable.Click
    Dim selIdx As Long = pvItemIndexFromHITEM(TreeView1.SelectedItem.Handle)
    pvEnableDevice selIdx, True
End Sub

Private Function dbg_GUIDToString(tg As UUID, Optional bBrack As Boolean = True) As String
'StringFromGUID2 never works, even "working" code from vbaccelerator AND MSDN
dbg_GUIDToString = Right$("00000000" & Hex$(tg.Data1), 8) & "-" & Right$("0000" & Hex$(tg.Data2), 4) & "-" & Right$("0000" & Hex$(tg.Data3), 4) & _
"-" & Right$("00" & Hex$(CLng(tg.Data4(0))), 2) & Right$("00" & Hex$(CLng(tg.Data4(1))), 2) & "-" & Right$("00" & Hex$(CLng(tg.Data4(2))), 2) & _
Right$("00" & Hex$(CLng(tg.Data4(3))), 2) & Right$("00" & Hex$(CLng(tg.Data4(4))), 2) & Right$("00" & Hex$(CLng(tg.Data4(5))), 2) & _
Right$("00" & Hex$(CLng(tg.Data4(6))), 2) & Right$("00" & Hex$(CLng(tg.Data4(7))), 2)
If bBrack Then dbg_GUIDToString = "{" & dbg_GUIDToString & "}"
End Function
Private Sub dbg_stringbytes(s As String, Optional bOut As Boolean = False)
Dim i As Long
Dim z As String
For i = 1 To Len(s)
    z = z & Format$(Hex$(AscW(Mid(s, i, 1))), "00") & " "
Next i
'If bOut Then
    Debug.Print "StringBytes(" & s & ")"
    Debug.Print z
'Else
'    Debug.Print "StringBytes(" & s & ")"
'    Debug.Print z
'End If
End Sub
End Class